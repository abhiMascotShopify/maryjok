{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).policies._index.jsx"],
  "sourcesContent": ["import {json} from '@shopify/remix-oxygen';\nimport {useLoaderData, Link} from '@remix-run/react';\n\nexport async function loader({context}) {\n  const data = await context.storefront.query(POLICIES_QUERY);\n  const policies = Object.values(data.shop || {});\n\n  if (!policies.length) {\n    throw new Response('No policies found', {status: 404});\n  }\n\n  return json({policies});\n}\n\nexport default function Policies() {\n  const {policies} = useLoaderData();\n\n  return (\n    <div className=\"policies\">\n      <h1>Policies</h1>\n      <div>\n        {policies.map((policy) => {\n          if (!policy) return null;\n          return (\n            <fieldset key={policy.id}>\n              <Link to={`/policies/${policy.handle}`}>{policy.title}</Link>\n            </fieldset>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nconst POLICIES_QUERY = `#graphql\n  fragment PolicyItem on ShopPolicy {\n    id\n    title\n    handle\n  }\n  query Policies ($country: CountryCode, $language: LanguageCode)\n    @inContext(country: $country, language: $language) {\n    shop {\n      privacyPolicy {\n        ...PolicyItem\n      }\n      shippingPolicy {\n        ...PolicyItem\n      }\n      termsOfService {\n        ...PolicyItem\n      }\n      refundPolicy {\n        ...PolicyItem\n      }\n      subscriptionPolicy {\n        id\n        title\n        handle\n      }\n    }\n  }\n`;\n"],
  "mappings": ";;;;;;;;;;AAmBM;AALS,SAAR,WAA4B;AACjC,QAAM,EAAC,SAAQ,IAAI,cAAc;AAEjC,SACE,mDAAC,SAAI,WAAU,YACb;AAAA,uDAAC,QAAG,wBAAJ;AAAA;AAAA;AAAA;AAAA,WAAY;AAAA,IACZ,mDAAC,SACE,mBAAS,IAAI,CAAC,WAAW;AACxB,UAAI,CAAC;AAAQ,eAAO;AACpB,aACE,mDAAC,cACC,6DAAC,QAAK,IAAI,aAAa,OAAO,UAAW,iBAAO,SAAhD;AAAA;AAAA;AAAA;AAAA,aAAsD,KADzC,OAAO,IAAtB;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,IAEJ,CAAC,KARH;AAAA;AAAA;AAAA;AAAA,WASA;AAAA,OAXF;AAAA;AAAA;AAAA;AAAA,SAYA;AAEJ;",
  "names": []
}
