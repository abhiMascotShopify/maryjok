{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account_.reset.$id.$resetToken.jsx"],
  "sourcesContent": ["import {json, redirect} from '@shopify/remix-oxygen';\nimport {Form, useActionData} from '@remix-run/react';\n\nexport const meta = () => {\n  return [{title: 'Reset Password'}];\n};\n\nexport async function action({request, context, params}) {\n  if (request.method !== 'POST') {\n    return json({error: 'Method not allowed'}, {status: 405});\n  }\n  const {id, resetToken} = params;\n  const {session, storefront} = context;\n\n  try {\n    if (!id || !resetToken) {\n      throw new Error('customer token or id not found');\n    }\n\n    const form = await request.formData();\n    const password = form.has('password') ? String(form.get('password')) : '';\n    const passwordConfirm = form.has('passwordConfirm')\n      ? String(form.get('passwordConfirm'))\n      : '';\n    const validInputs = Boolean(password && passwordConfirm);\n    if (validInputs && password !== passwordConfirm) {\n      throw new Error('Please provide matching passwords');\n    }\n\n    const {customerReset} = await storefront.mutate(CUSTOMER_RESET_MUTATION, {\n      variables: {\n        id: `gid://shopify/Customer/${id}`,\n        input: {password, resetToken},\n      },\n    });\n\n    if (customerReset?.customerUserErrors?.length) {\n      throw new Error(customerReset?.customerUserErrors[0].message);\n    }\n\n    if (!customerReset?.customerAccessToken) {\n      throw new Error('Access token not found. Please try again.');\n    }\n    session.set('customerAccessToken', customerReset.customerAccessToken);\n\n    return redirect('/account', {\n      headers: {\n        'Set-Cookie': await session.commit(),\n      },\n    });\n  } catch (error) {\n    if (error instanceof Error) {\n      return json({error: error.message}, {status: 400});\n    }\n    return json({error}, {status: 400});\n  }\n}\n\nexport default function Reset() {\n  const action = useActionData();\n\n  return (\n    <div className=\"account-reset\">\n      <h1>Reset Password.</h1>\n      <p>Enter a new password for your account.</p>\n      <Form method=\"POST\">\n        <fieldset>\n          <label htmlFor=\"password\">Password</label>\n          <input\n            aria-label=\"Password\"\n            autoComplete=\"current-password\"\n            // eslint-disable-next-line jsx-a11y/no-autofocus\n            autoFocus\n            id=\"password\"\n            minLength={8}\n            name=\"password\"\n            placeholder=\"Password\"\n            required\n            type=\"password\"\n          />\n          <label htmlFor=\"passwordConfirm\">Re-enter password</label>\n          <input\n            aria-label=\"Re-enter password\"\n            autoComplete=\"current-password\"\n            id=\"passwordConfirm\"\n            minLength={8}\n            name=\"passwordConfirm\"\n            placeholder=\"Re-enter password\"\n            required\n            type=\"password\"\n          />\n        </fieldset>\n        {action?.error ? (\n          <p>\n            <mark>\n              <small>{action.error}</small>\n            </mark>\n          </p>\n        ) : (\n          <br />\n        )}\n        <button type=\"submit\">Reset</button>\n      </Form>\n      <br />\n      <p>\n        <a href=\"/account/login\">Back to login \u2192</a>\n      </p>\n    </div>\n  );\n}\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customerreset\nconst CUSTOMER_RESET_MUTATION = `#graphql\n  mutation customerReset(\n    $id: ID!,\n    $input: CustomerResetInput!\n    $country: CountryCode\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customerReset(id: $id, input: $input) {\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n"],
  "mappings": ";;;;;;;;;;AA+DM;AA5DC,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC,EAAC,OAAO,iBAAgB,CAAC;AACnC;AAqDe,SAAR,QAAyB;AAC9B,QAAM,SAAS,cAAc;AAE7B,SACE,mDAAC,SAAI,WAAU,iBACb;AAAA,uDAAC,QAAG,+BAAJ;AAAA;AAAA;AAAA;AAAA,WAAmB;AAAA,IACnB,mDAAC,OAAE,sDAAH;AAAA;AAAA;AAAA;AAAA,WAAyC;AAAA,IACzC,mDAAC,QAAK,QAAO,QACX;AAAA,yDAAC,cACC;AAAA,2DAAC,WAAM,SAAQ,YAAW,wBAA1B;AAAA;AAAA;AAAA;AAAA,eAAkC;AAAA,QAClC;AAAA,UAAC;AAAA;AAAA,YACC,cAAW;AAAA,YACX,cAAa;AAAA,YAEb,WAAS;AAAA,YACT,IAAG;AAAA,YACH,WAAW;AAAA,YACX,MAAK;AAAA,YACL,aAAY;AAAA,YACZ,UAAQ;AAAA,YACR,MAAK;AAAA;AAAA,UAVP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAWA;AAAA,QACA,mDAAC,WAAM,SAAQ,mBAAkB,iCAAjC;AAAA;AAAA;AAAA;AAAA,eAAkD;AAAA,QAClD;AAAA,UAAC;AAAA;AAAA,YACC,cAAW;AAAA,YACX,cAAa;AAAA,YACb,IAAG;AAAA,YACH,WAAW;AAAA,YACX,MAAK;AAAA,YACL,aAAY;AAAA,YACZ,UAAQ;AAAA,YACR,MAAK;AAAA;AAAA,UARP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QASA;AAAA,WAxBF;AAAA;AAAA;AAAA;AAAA,aAyBA;AAAA,MACC,QAAQ,QACP,mDAAC,OACC,6DAAC,UACC,6DAAC,WAAO,iBAAO,SAAf;AAAA;AAAA;AAAA;AAAA,aAAqB,KADvB;AAAA;AAAA;AAAA;AAAA,aAEA,KAHF;AAAA;AAAA;AAAA;AAAA,aAIA,IAEA,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAI;AAAA,MAEN,mDAAC,YAAO,MAAK,UAAS,qBAAtB;AAAA;AAAA;AAAA;AAAA,aAA2B;AAAA,SApC7B;AAAA;AAAA;AAAA;AAAA,WAqCA;AAAA,IACA,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,WAAI;AAAA,IACJ,mDAAC,OACC,6DAAC,OAAE,MAAK,kBAAiB,oCAAzB;AAAA;AAAA;AAAA;AAAA,WAAwC,KAD1C;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,OA5CF;AAAA;AAAA;AAAA;AAAA,SA6CA;AAEJ;",
  "names": []
}
