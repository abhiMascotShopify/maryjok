{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account_.register.jsx"],
  "sourcesContent": ["import {json, redirect} from '@shopify/remix-oxygen';\nimport {Form, Link, useActionData} from '@remix-run/react';\n\nexport async function loader({context}) {\n  const customerAccessToken = await context.session.get('customerAccessToken');\n  if (customerAccessToken) {\n    return redirect('/account');\n  }\n\n  return json({});\n}\n\nexport const action = async ({request, context}) => {\n  if (request.method !== 'POST') {\n    return json({error: 'Method not allowed'}, {status: 405});\n  }\n\n  const {storefront, session} = context;\n  const form = await request.formData();\n  const email = String(form.has('email') ? form.get('email') : '');\n  const password = form.has('password') ? String(form.get('password')) : null;\n  const passwordConfirm = form.has('passwordConfirm')\n    ? String(form.get('passwordConfirm'))\n    : null;\n\n  const validPasswords =\n    password && passwordConfirm && password === passwordConfirm;\n\n  const validInputs = Boolean(email && password);\n  try {\n    if (!validPasswords) {\n      throw new Error('Passwords do not match');\n    }\n\n    if (!validInputs) {\n      throw new Error('Please provide both an email and a password.');\n    }\n\n    const {customerCreate} = await storefront.mutate(CUSTOMER_CREATE_MUTATION, {\n      variables: {\n        input: {email, password},\n      },\n    });\n\n    if (customerCreate?.customerUserErrors?.length) {\n      throw new Error(customerCreate?.customerUserErrors[0].message);\n    }\n\n    const newCustomer = customerCreate?.customer;\n    if (!newCustomer?.id) {\n      throw new Error('Could not create customer');\n    }\n    //console.log(newCustomer.id)\n\n    // get an access token for the new customer\n    const {customerAccessTokenCreate,} = await storefront.mutate(\n      REGISTER_LOGIN_MUTATION,\n      {\n        variables: {\n          input: {\n            email,\n            password,\n          },\n        },\n      },\n    );\n\n    if (!customerAccessTokenCreate?.customerAccessToken?.accessToken) {\n      throw new Error('Missing access token');\n    }\n    session.set(\n      'customerAccessToken',\n      customerAccessTokenCreate?.customerAccessToken,\n    );\n\n    return json(\n      {error: null, newCustomer},\n      {\n        status: 302,\n        headers: {\n          'Set-Cookie': await session.commit(),\n          Location: '/account',\n        },\n      },\n    );\n  } catch (error) {\n    if (error instanceof Error) {\n      return json({error: error.message}, {status: 400});\n    }\n    return json({error}, {status: 400});\n  }\n};\n\nexport default function Register() {\n  const data = useActionData();\n  const error = data?.error || null;\n  return (\n    <>\n    {/*\n    <div className=\"login\">\n      <h1>Register.</h1>\n      <Form method=\"POST\">\n        <fieldset>\n          <label htmlFor=\"email\">Email address</label>\n          <input\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            autoComplete=\"email\"\n            required\n            placeholder=\"Email address\"\n            aria-label=\"Email address\"\n            // eslint-disable-next-line jsx-a11y/no-autofocus\n            autoFocus\n          />\n          <label htmlFor=\"password\">Password</label>\n          <input\n            id=\"password\"\n            name=\"password\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            placeholder=\"Password\"\n            aria-label=\"Password\"\n            minLength={8}\n            required\n          />\n          <label htmlFor=\"passwordConfirm\">Re-enter password</label>\n          <input\n            id=\"passwordConfirm\"\n            name=\"passwordConfirm\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            placeholder=\"Re-enter password\"\n            aria-label=\"Re-enter password\"\n            minLength={8}\n            required\n          />\n        </fieldset>\n        {error ? (\n          <p>\n            <mark>\n              <small>{error}</small>\n            </mark>\n          </p>\n        ) : (\n          <br />\n        )}\n        <button type=\"submit\">Register</button>\n      </Form>\n      <br />\n      <p>\n        <Link to=\"/account/login\">Login \u2192</Link>\n      </p>\n    </div>*/}\n    <div className=\"flex flex-col sm:flex-row\">\n    <div className=\"sm:w-2/3  sm:block\">\n      <img\n        src=\"https://cdn.shopify.com/s/files/1/0809/4253/0882/files/LoginSideImg-Photoroom_1_2.png?v=1709296234\"\n        alt=\"Login Background\"\n        className=\"w-full h-full object-cover\"\n      />\n    </div>\n    <div className=\"w-full justify-center items-center flex flex-col\">\n      <Form className=\"w-full justify-center items-center login_wrapper\" method=\"POST\">\n      <fieldset>\n        <div className=\"mb-3\" >\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\" for=\"username\">\n            Email\n          </label>\n          <input className=\"shadow appearance-none border rounded w-full py-1 px-2 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" \n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            autoComplete=\"email\"\n            placeholder=\"Email address\"\n            aria-label=\"Email address\"\n            required/>\n        </div>\n        <div className=\"mb-4\">\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\" for=\"password\">\n            Password\n          </label>\n          <input className=\"shadow appearance-none border rounded w-full py-1 px-2 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline\" \n          id=\"password\"\n          name=\"password\"\n          type=\"password\"\n          autoComplete=\"current-password\"\n          placeholder=\"Password\"\n          aria-label=\"Password\"\n          minLength={8}\n          required/>\n          {error ? (\n              <p className=\"text-red-500 text-xs italic\">{error}</p>\n            ) : (\n              <br />\n            )}\n          <label htmlFor=\"passwordConfirm\">Re-enter password</label>\n              <input className=\"shadow appearance-none border rounded w-full py-1 px-2 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline\"\n                id=\"passwordConfirm\"\n                name=\"passwordConfirm\"\n                type=\"password\"\n                autoComplete=\"current-password\"\n                placeholder=\"Re-enter password\"\n                aria-label=\"Re-enter password\"\n                minLength={8}\n                required\n              />\n        </div>\n        <div className=\"flex items-center justify-between\">\n          <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\" type=\"submit\">\n            Register\n          </button>\n          <a className=\"inline-block align-baseline font-bold text-sm text-blue-500 hover:text-blue-800\" href=\"/account/recover\">\n            Forgot Password?\n          </a>\n        </div>\n        <a className=\"py-4 text-blue-500\" href=\"/account/login\"> Login </a>\n        </fieldset>\n      </Form>\n    <p className=\"text-center text-gray-500 text-xs\">\n      &copy;2023. All rights reserved.\n    </p>\n  </div>   \n</div>\n</>\n);\n}\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customerCreate\nconst CUSTOMER_CREATE_MUTATION = `#graphql\n  mutation customerCreate(\n    $input: CustomerCreateInput!,\n    $country: CountryCode,\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customerCreate(input: $input) {\n      customer {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customeraccesstokencreate\nconst REGISTER_LOGIN_MUTATION = `#graphql\n  mutation registerLogin(\n    $input: CustomerAccessTokenCreateInput!,\n    $country: CountryCode,\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customerAccessTokenCreate(input: $input) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n    }\n  }\n`;\n"],
  "mappings": "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",
  "names": []
}
